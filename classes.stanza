defpackage classes :
  import core
  import collections
  import math
  import geom
  import clipper
  import font
  import libfive
  import utilities
  import primitives

public defstruct Design :
  connections : Vector<Connection>
  shapes : Vector<Shape>
  jointWidth : Float
  jointLength : Float
  pinDiameter : Float
  woodThickness : Float
  numPins : Int with : (setter => set-numPins)

public defstruct Connection :
  maleIndex : Int
  femaleIndex : Int
  cPoint : V3f
  cAngle : V3f
  connectorTilt: Float
  joint : (Float,Float, Float) -> [Shape, Tuple<Shape>]

public defn add_design_pins (design:Design, n_pins:Int) :
  val current = numPins(design)
  set-numPins(design, current + n_pins)

public defn new_design (joint_size:Float, wood_thickness:Float) :
  Design(Vector<Connection>(), Vector<Shape>(), joint_size, joint_size * 1.5f, joint_size / 4.0f, wood_thickness, 0)

public defn add_shape (design:Design, shape:Shape) -> Int:
  val i:Int = length(shapes(design))
  add(shapes(design), shape)
  i



public defn get_shape (design:Design, index:Int) :
  shapes(design)[index]

public defn set_shape (design:Design, index:Int, shape:Shape) :
  shapes(design)[index] = shape

public defn num_shapes (design:Design) :
  length(shapes(design))

public defn add_connection (design:Design, male_index:Int, female_index:Int, cp:V3f, cangle:V3f, c_align:Float, key:(Float,Float,Float) -> [Shape, Tuple<Shape>]) :
  val connection = Connection(male_index, female_index, cp, cangle, c_align, key)
  add(connections(design), connection)
