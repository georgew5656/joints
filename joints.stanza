defpackage joints :
  import core
  import collections
  import math
  import geom
  import clipper
  import font
  import libfive

val wood_thickness = 1.0f * 25.4f
var index = 0

defn trapezoid (base1:Float, base2:Float, height:Float) -> Polygon:
  var point1 = V2f(-1.0f * base1 / 2.0f ,-1.0f * height / 2.0f)
  var point2 = V2f(base1 / 2.0f, -1.0f * height / 2.0f)
  var point3 = V2f(base2 / 2.0f, height / 2.0f)
  var point4 = V2f(-1.0f * base2 / 2.0f, height / 2.0f)
  Polygon([Contour([point1, point2, point3, point4])])

;; current place is to slice the joints and stick the pieces together, this would technically only approximate the dovetail joints

;; alternatively could use framing to support 3d construction of the joint (this is recursive)

;; we should probably stack up until we have enough depth for things to work. also we can use pins to hold wood together.

;; would it be better to just use very thin 3d printed objects?

;; currently only works with parallel pieces (end joint)
defn gooseneck (shape1:Shape, shape2:Shape, attach_point:V3f) :
  []

def to_stl(shape:Shape):
  save(string-join(["example", to-str(index) , ".stl"]), shape)


;; parallel->gooseneck
;;corner_right->dovetail_blind
;;middle_right->dovetail_dado

defn add_connectors (male:Shape, female:Shape, joint_point:V3f, key:Float->Shape) :
  var origin_point = z3f(magnitude(joint_point))
  var male_rotated = rot(joint_point, origin_point, male)
  var female_rotated = rot(joint_point, origin_point, female)
  var width_female = x(hi(bounds(female_rotated))) - x(lo(bounds(female_rotated)))
  var width_male = x(hi(bounds(male_rotated))) - x(lo(bounds(male_rotated)))
  var connector = key(min(width_female, width_male))
  male_rotated = union(stack-z([male_rotated, connector]))
  female_rotated = rem(to-array(align-min-z([connector, female_rotated]))[1], to-array(align-min-z([connector, female_rotated]))[0])
  male = rot(origin_point, joint_point, male_rotated)
  female = rot(origin_point, joint_point, female_rotated)

;; middle right angle joint
defn dovetail_dado_primitive (width:Float) :
  var slice_in = tenon(V3f(width, 15.0f, wood_thickness))

  var face_far = polygon-rect(V2f(width * 0.375f , wood_thickness / 2.0f))
  var face_close = polygon-rect(V2f(width / 4.0f, wood_thickness / 2.0f))
  var neck = loft(width / 4.0f , to-shape(face_close), to-shape(face-far))

  var hat = tenon(V3f(width / 2.0f, width / 4.0f, wood_thickness / 2.0f))
  var joint = union(stack-z([slice_in, neck, hat]))
  joint

;; corner joint
defn dovetail_blind_primitive (depth:Float) :
  var tapering_slope = wood_thickness / 10.0f
  var face_out = polygon-rect(V2f(depth, wood_thickness / 2.0f))
  var face_in = polygon-rect(V2f(depth, wood_thickness / 2.0f + tapering_slope))
  var joint = loft(depth, to-shape(face_out), to-shape(face-in))
  joint
;; parallel joint
defn gooseneck_primitive (width:Float) -> Shape :
  val length = width * 1.5f

  var close_tenon = tenon(V3f(width / 4.0f, width / 8.0f, wood_thickness / 2.0f))
  var far_tenon = tenon(V3f(width / 4.0f, width / 8.0f, wood_thickness / 2.0f))
  var middle_tenon = tenon(V3f(width / 4.0f, width / 8.0f, wood_thickness) / 2.0f)

  var neck = extrude(wood_thickness / 2.0f, to-shape(polygon-rect(V2f(width / 4.0f, length / 2.0f))))
  
  var tapering_slope = wood_thickness / 10.0f
  var head_top = trapezoid(width / 2.0f, width / 4.0f, length / 2.0f)
  var head_bottom = trapezoid(width / 2.0f - tapering_slope, width / 4.0f, length / 2.0f)
  var head = loft(wood_thickness / 2.0f, to-shape(head_bottom), to-shape(head_top))

  var joint = union(stack-z([neck, head]))
  joint = union(stack-x([far_tenon, joint, close_tenon]))
  joint = union(stack-y([joint, middle_tenon]))
  joint

;;fasteners
defn key () :
  []

;; add pin hole to wood at specified pin locations, will probably have to 3d print the pins.
defn pin (pinned_shape:Shape, pin_locations:Tuple<V3f) :
    

defn tenon (dimensions:V3f) -> Shape:
  println(polygon-rect(V2f(x(dimensions), y(dimensions))))
  var tenon = to-shape(polygon-rect(V2f(x(dimensions), y(dimensions))))
  extrude(z(dimensions), tenon)

defn main () :
  var shape1 = gooseneck_primitive(120.0f)
  save("head.stl", shape1)

main()
