defpackage utilities :
  import core
  import collections
  import math
  import geom
  import clipper
  import font
  import libfive
  import classes

var ind:Int = 0
public val mm_to_point = 2.83465f
public val inch_to_mm = 25.4f
public val width_piece = mm_to_point * inch_to_mm * 1.0f / 8.0f
;; Utility Functions

;;based off of x,y,z selector functions, generate a connection point between two shapes.
public defn connection_point (bnds:Box3f, props: V3f)  -> V3f :
  point_selector(props)(bnds)

public defn center_z (shape:Shape) -> Shape :
  mov-z(-0.5f * (z(hi(bounds(shape))) + z(lo(bounds(shape)))), shape)

public defn point_selector (proportions:V3f) -> (Box3f -> V3f) :
  defn custom_point_selector (b:Box3f) -> V3f :
    var distance = minus(hi(b), lo(b))
    var x1 = x(lo(b)) + x(distance) * x(proportions)
    var y1 = y(lo(b)) + y(distance) * y(proportions)
    var z1 = z(lo(b)) + z(distance) * z(proportions)
    V3f(x1, y1, z1)
  custom_point_selector

public defn range_axis (shape:Shape, axis:V3f -> Float) :
  axis(hi(bounds(shape))) - axis(lo(bounds(shape)))

;;Functions for writing to disk
public defn to_stl (shape:Shape):
  set-resolution(15.0f)
  save(string-join(["test", to-string(ind), ".stl"]), shape)
  ind = ind + 1

;;Function for drawing red lines
defn rgb_red (polygon:Polygon) :
  rgb(RED, polygon)

public defn to_svg (slices:Tuple<Polygon>, filename:String) :
  set-resolution(15.0f)
  val stacked = to-array<Polygon>(stack-x(map(rgb_red, slices)))
  val add_partitions = Array<Polygon>(length(stacked))
  for i in 0 to length(add_partitions) do :
    add_partitions[i] = mov-x(5.0f * to-float(i), stacked[i])
  svg(group(to-tuple(add_partitions)), string-join(["test", to-string(ind), ".svg"]), V2f(100.0f, 30.0f))
  ind = ind + 1

;;Attach shape 1 to shape 2 based on points and return shape1
public defn attach_shapes (shape1:Shape, location1:V3f, shape2:Shape, location2:V3f) -> Shape :
  val attached_shapes = attach(shape1, connection_point(bounds(shape1), location1), shape2, connection_point(bounds(shape2), location2))
  to-array<Shape>(attached_shapes)[0]

public defn lay_flat (shape:Shape) :
  val x_range = range_axis(shape, x)
  val y_range = range_axis(shape, y)
  val z_range = range_axis(shape, z)
  if x_range < z_range and x_range < y_range :
    rot-y(90.0f, rot-x(90.0f, shape))
  else if y_range < z_range :
    rot-x(90.0f, rot-y(90.0f, shape))
  else :
    shape
;;generate_point to write to stl for debugging
public defn generate_point (location:V3f) -> Shape :
  var c = cube(1.0f)
  mov(location, c)
