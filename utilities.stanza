defpackage utilities :
  import core
  import collections
  import math
  import geom
  import clipper
  import font
  import libfive
  import classes

var ind:Int = 0

;; Utility Functions

;;based off of x,y,z selector functions, generate a connection point between two shapes.
public defn connection_point (bnds:Box3f, props: V3f)  -> V3f :
  point_selector(props)(bnds)

public defn center_z (shape:Shape) -> Shape :
  mov-z(-0.5f * (z(hi(bounds(shape))) + z(lo(bounds(shape)))), shape)

public defn point_selector (proportions:V3f) -> (Box3f -> V3f) :
  defn custom_point_selector (b:Box3f) -> V3f :
    var distance = minus(hi(b), lo(b))
    var x1 = x(lo(b)) + x(distance) * x(proportions)
    var y1 = y(lo(b)) + y(distance) * y(proportions)
    var z1 = z(lo(b)) + z(distance) * z(proportions)
    V3f(x1, y1, z1)
  custom_point_selector

;;Functions for writing to disk
public defn to_stl (shape:Shape):
  set-resolution(50.0f)
  save(string-join(["test", to-string(ind), ".stl"]), shape)
  ind = ind + 1

public defn to_svg (slices:Tuple<Polygon>) :
  val size = V2f(25.0f, 10.0f)
  val sheets = nest(slices, size, { polygon-rect(xy(_)) }, 1.0f)
  for (sheet in sheets, i in 0 to false) do :
    svg(sheet, to-string $ ("%_-sheet-%_.svg" % ["test", i]), dims-to-box $ size)

;;generate_point to write to stl for debugging
public defn generate_point (location:V3f) -> Shape :
  var c = cube(1.0f)
  mov(location, c)
