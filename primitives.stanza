defpackage primitives :
  import core
  import collections
  import math
  import geom
  import clipper
  import font
  import libfive
  import utilities

val wood_thickness:Float = 4.0f

public defn trapezoid (base1:Float, base2:Float, height:Float) -> Polygon:
  var point1 = V2f(-1.0f * base1 / 2.0f ,-1.0f * height / 2.0f)
  var point2 = V2f(base1 / 2.0f, -1.0f * height / 2.0f)
  var point3 = V2f(base2 / 2.0f, height / 2.0f)
  var point4 = V2f(-1.0f * base2 / 2.0f, height / 2.0f)
  Polygon([Contour([point1, point2, point3, point4])])

;;perpindicular joint
public defn dovetail_dado_primitive (width:Float, length:Float) -> [Shape, Tuple<Shape>]:
  var slice_in = tenon(V3f(width, length / 6.0f, wood_thickness))
  var neck = extrude(wood_thickness / 2.0f ,to-shape(trapezoid(width / 4.0f, width / 2.0f ,length / 2.0f)))
  var hat = tenon(V3f(width * 2.0f / 3.0f, width / 3.0f, wood_thickness / 2.0f))
  neck = union(attach(slice_in, connection_point(bounds(slice_in), mid, hi, hi), neck, connection_point(bounds(neck), mid, lo, hi)))
  val pin_location = mov(connection_point(bounds(neck), mid, mid, mid), pin(width / 8.0f, wood_thickness))
  val joint = union(attach(hat, connection_point(bounds(hat), mid, lo, hi), neck, connection_point(bounds(neck), mid, hi, hi)))
  [joint, [pin_location]]

;; corner joint
public defn dovetail_blind_primitive (width:Float, length:Float) -> [Shape, Tuple<Shape>]:
  var face = trapezoid(width, 2.0f * width, length)
  var joint = extrude(length, to-shape(face))
  var pin_location = mov(connection_point(bounds(joint), mid, mid, mid), pin(length / 8.0f, wood_thickness))
  [rot-z(90.0f, rot-y(90.0f, joint)), [pin_location]]

;; parallel joint
public defn gooseneck_primitive (width:Float, length:Float) -> [Shape, Tuple<Shape>] :
  var left_tenon = tenon(V3f(width / 3.0f, width / 6.0f, wood_thickness / 2.0f))
  var right_tenon = tenon(V3f(width / 3.0f, width / 6.0f, wood_thickness / 2.0f))
  var middle_tenon = tenon(V3f(width / 3.0f, width / 6.0f, wood_thickness / 2.0f))

  var neck = extrude(wood_thickness / 2.0f, to-shape(polygon-rect(V2f(width / 3.0f, length * 0.75f))))

  var lower_pin_location = mov(connection_point(bounds(neck), mid ,point_selector(V3f(1.0f / 3.0f, 1.0f / 3.0f, 1.0f / 3.0f)) ,mid), pin(width / 8.0f, wood_thickness))
  var upper_pin_location = mov(connection_point(bounds(neck), mid, point_selector(V3f(2.0f / 3.0f, 2.0f / 3.0f, 2.0f / 3.0f)), mid), pin(width / 8.0f, wood_thickness))


  neck = union(attach(left_tenon, connection_point(bounds(left_tenon), hi, lo, mid), neck, connection_point(bounds(neck), lo, lo, mid)))
  neck = union(attach(right_tenon, connection_point(bounds(right_tenon), lo, lo, mid), neck, connection_point(bounds(neck), hi, lo, mid)))

  var tapering_slope = wood_thickness / 10.0f
  var head_top = trapezoid(width / 2.0f, width / 4.0f, length * 0.25f)
  var head_bottom = trapezoid(width / 2.0f - tapering_slope, width / 4.0f - tapering_slope, length * 0.25f)
  var head = loft(wood_thickness / 2.0f, to-shape(head_bottom), to-shape(head_top))

  var joint = union(attach(head, connection_point(bounds(head), mid, lo, mid), neck, connection_point(bounds(neck), mid, hi, mid)))
  joint = union(attach(middle_tenon, connection_point(bounds(middle_tenon), mid, lo, hi), joint, connection_point(bounds(joint), mid, lo, lo)))
  [joint, [lower_pin_location, upper_pin_location]]

public defn pin (pin_diameter:Float, pin_height:Float) :
  cylinder(pin_diameter, pin_height)


public defn tenon (dimensions:V3f) -> Shape:
  var tenon = to-shape(polygon-rect(V2f(x(dimensions), y(dimensions))))
  extrude(z(dimensions), tenon)
