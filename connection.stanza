defpackage connection :
  import core
  import collections
  import math
  import geom
  import clipper
  import font
  import libfive
  import primitives
  import utilities

;;Connection Functions

;; add pin hole to wood at specified pin locations, will probably have to 3d print the pins.
public defn add_pin (shape:Shape, pin_location:V3f, pin_diameter:Float, design:Design) :
  var pinned_shape = shape
  val primitive = pin(pin_diameter, wood_thickness)
  val pin_centered = mov(pin_location, primitive)
  pinned_shape = rem(pinned_shape, pin_centered)
  [pinned_shape, pin_centered]

;; add connector joints to the male, female shapes.
public defn add_connectors (design:Design):
  for connection in connectors(design) do :
    var c_point = cPoint(connection)
    var c_angle = cAngle(connection)
    var male_shape = get_shape(design, maleIndex(connection))
    var female_shape = get_shape(design, femaleIndex(connection))
    var key = joint
    var joint_male_shape = add_connection_male(male_shape, c_point, c_angle,)


public defn add_connection_male (shape:Shape, c_point:V3f, c_angle, joint:(Float, Float) -> [Shape, Tuple<Shape>], w:Float, l:Float, wood_thickness:Float) -> Shape:
  var rotated_cp = y3f(magnitude(cp))
  var rotated_shape = rot(cp, rotated_cp, shape)
  val [connector, pin_locations] = key(width, l)
  var pinned_connector = connector
  for pin_location in pin_locations do :
    pinned_connector = rem(pinned_connector, pin_location)
  var connector_cp = connection_point(bounds(connector), V3f(0.5f, 0.0f, 0.5f))
  var joint = union(attach(pinned_connector, connector_cp, rotated_shape, rotated_cp))
  rot(rotated_cp, cp, joint)

public defn add_connection_female (shape:Shape, cp:V3f, joint:(Float, Float) -> [Shape, Tuple<Shape>], width:Float, length:Float, wood_thickness:Float) -> Shape:
  var rotated_cp = y3f(magnitude(cp))
  var rotated_shape = rot(cp, rotated_cp, shape)
  val [connector, pin_locations] = key(width, length)
  var pinned_connector = connector
  for pin_location in pin_locations do :
    pinned_connector = bit-or(pinned_connector, pin_location)
  var connector_cp = connection_point(bounds(connector), V3f(0.5f, 0.0f, 0.5f))
  val connected = to-array<Shape>(attach(pinned_connector, connector_cp, rotated_shape, rotated_cp))
  rot(rotated_cp, cp, rem(connected[1], connected[0]))
